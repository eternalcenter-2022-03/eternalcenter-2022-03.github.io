<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>System Login Security (系统登录安全) &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-2022-03.github.io/category/system/system-network-system-security-system-log/system-security/system-login-security/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-2022-03.github.io/</link>
	<description></description>
	<lastBuildDate>Sat, 12 Feb 2022 16:07:06 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[内容] Linux 用户登录相关日志</title>
		<link>https://eternalcenter-2022-03.github.io/login-log/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 12 Feb 2022 15:49:11 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Security Log (系统安全日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=21918</guid>

					<description><![CDATA[内容一：所有正在登录的用户 内容二：所有的登录和登出记录 内容三：所有用户最有一次登录记录 内容四：所有错误登录尝试记录 内容五：所有信息 （其中也包括登录相关的记录）]]></description>
										<content:encoded><![CDATA[
<h4 id="内容一-所有正在登录的用户">内容一：所有正在登录的用户</h4>



<pre class="wp-block-code"><code>/var/run/utmp</code></pre>



<h4 id="内容二-所有的登录和登出记录">内容二：所有的登录和登出记录</h4>



<pre class="wp-block-code"><code>/var/log/wtmp</code></pre>



<h4 id="内容三-所有用户最有一次登录记录">内容三：所有用户最有一次登录记录</h4>



<pre class="wp-block-code"><code>/var/log/lastlog</code></pre>



<h4 id="内容四-所有错误登录尝试记录">内容四：所有错误登录尝试记录</h4>



<pre class="wp-block-code"><code>/var/log/btmp</code></pre>



<h4 id="内容五-所有信息-其中也包括登录相关的记录">内容五：所有信息 （其中也包括登录相关的记录）</h4>



<pre class="wp-block-code"><code>/var/log/messages</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] sudo 提权的实现 （sudo 提权的同时可以使用代理） （openSUSE &#038; SLE）</title>
		<link>https://eternalcenter-2022-03.github.io/sudo-self-proxy-opensuse-sle/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 15 Jan 2022 14:47:45 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Privilege (系统权限)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=21217</guid>

					<description><![CDATA[步骤一：给用户添加相应的 sudo 权限 添加以下内容： （补充：这里以给用户 zhumingyu 添加 /usr/bin/mysql 命令为例） 步骤二：设置用户使用自己的密码实现 sudo 提权 在 这一行下面添加： （补充：这里以允许用户在进行 sudo 提权的同时也能使用 http_proxy、https_proxy 为例）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：给用户添加相应的 sudo 权限</h4>



<pre class="wp-block-code"><code># vim /etc/sudoers</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>……
zhumingyu ALL=(ALL) /usr/bin/mysql</code></pre>



<p>（补充：这里以给用户 zhumingyu 添加 /usr/bin/mysql 命令为例）</p>



<h4>步骤二：设置用户使用自己的密码实现 sudo 提权</h4>



<pre class="wp-block-code"><code># vim /etc/sudoers</code></pre>



<p>在</p>



<pre class="wp-block-code"><code>......
env_reset
......</code></pre>



<p>这一行下面添加：</p>



<pre class="wp-block-code"><code>......
Defaults env_keep += "http_proxy https_proxy"
......</code></pre>



<p>（补充：这里以允许用户在进行 sudo 提权的同时也能使用 http_proxy、https_proxy 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 本地和 ssh 输错密码次数的限制 （pam_faillock 版） （CentOS Linux 8 &#038; RHEL 8 版）</title>
		<link>https://eternalcenter-2022-03.github.io/local-ssh-login-attempt-pam_faillock-centos-linux-8-rhel-8/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 02 Jan 2022 08:34:31 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=21068</guid>

					<description><![CDATA[步骤目录： 步骤一：背景了解 步骤二：设置 ssh 的登录限制2.1 在 sshd 中开启 UsePAM2.1.1 修改 sshd 配置文件2.1.2 让 sshd 的配置生效2.2 确保 /etc/pam.d/login 包含 password-auth2.3 添加 pam_faillock 模块 步骤三：远程登录密码输错次数的用户管理3.1 显示某个用户近期输错了几次密码3.2 重制所有远程登录密码输错次数 具体的操作步骤： 步骤一：背景了解 从 CentOS Linux 8 &#38; RHEL 8 开始，系统的身份验证模块从 CentOS Linux 7 &#38; RHEL 7 的 pam_tally2 换成了 pam_faillock 步骤二：设置 ssh 的登录限制2.1 在 sshd 中开启 UsePAM2.1.1 修改 sshd 配置文件 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/local-ssh-login-attempt-pam_faillock-centos-linux-8-rhel-8/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Linux 本地和 ssh 输错密码次数的限制 （pam_faillock 版） （CentOS Linux 8 &#038; RHEL 8 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2 id="步骤目录">步骤目录：</h2>



<h4 id="步骤一-背景了解">步骤一：背景了解</h4>



<h4 id="步骤二-设置-ssh-的登录限制-2-1-在-sshd-中开启-usepam-2-1-1-修改-sshd-配置文件-2-1-2-让-sshd-的配置生效-2-2-确保-etc-pam-d-login-包含-password-auth-2-3-添加-pam-faillock-模块">步骤二：设置 ssh 的登录限制<br>2.1 在 sshd 中开启 UsePAM<br>2.1.1 修改 sshd 配置文件<br>2.1.2 让 sshd 的配置生效<br>2.2 确保 /etc/pam.d/login 包含 password-auth<br>2.3 添加 pam_faillock 模块</h4>



<h4 id="步骤三-远程登录密码输错次数的用户管理-3-1-显示某个用户近期输错了几次密码-3-2-重制所有远程登录密码输错次数">步骤三：远程登录密码输错次数的用户管理<br>3.1 显示某个用户近期输错了几次密码<br>3.2 重制所有远程登录密码输错次数</h4>



<h2 id="具体的操作步骤">具体的操作步骤：</h2>



<h4 id="步骤一-背景了解">步骤一：背景了解</h4>



<p>从 CentOS Linux 8 &amp; RHEL 8 开始，系统的身份验证模块从 CentOS Linux 7 &amp; RHEL 7 的 pam_tally2 换成了 pam_faillock</p>



<h4 id="步骤二-设置-ssh-的登录限制-2-1-在-sshd-中开启-usepam-2-1-1-修改-sshd-配置文件">步骤二：设置 ssh 的登录限制<br>2.1 在 sshd 中开启 UsePAM<br>2.1.1 修改 sshd 配置文件</h4>



<pre class="wp-block-code"><code># vim /etc/ssh/sshd_config</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
#UsePAM no
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
UsePAM yes
......</code></pre>



<h4 id="2-1-2-让-sshd-的配置生效">2.1.2 让 sshd 的配置生效</h4>



<pre class="wp-block-code"><code># systemctl restart sshd</code></pre>



<h4 id="2-2-确保-etc-pam-d-login-包含-password-auth">2.2 确保 /etc/pam.d/login 包含 password-auth</h4>



<pre class="wp-block-code"><code># cat /etc/pam.d/login | grep password-auth
auth       substack     password-auth
account    include      password-auth
password   include      password-auth
session    include      password-auth</code></pre>



<p>（注意：如果输出结果中不包含这 4 条内容则需要手动添加）</p>



<h4 id="2-3-添加-pam-faillock-模块">2.3 添加 pam_faillock 模块</h4>



<pre class="wp-block-code"><code># vim /etc/pam.d/password-auth</code></pre>



<p>在</p>



<pre class="wp-block-code"><code>......
auth required pam_env.so
......</code></pre>



<p>这一行下面添加：</p>



<pre class="wp-block-code"><code>......
auth  required  pam_faillock.so preauth silent audit even_deny_root deny=6 unlock_time=180
......</code></pre>



<p>在</p>



<pre class="wp-block-code"><code>auth sufficient pam_unix.so try_first_pass nullok</code></pre>



<p>这一行下面添加：</p>



<pre class="wp-block-code"><code>......
auth  &#91;default=die] pam_faillock.so authfail audit even_deny_root deny=6 unlock_time=180
......</code></pre>



<p>在</p>



<pre class="wp-block-code"><code>account required pam_unix.so</code></pre>



<p>这一行下面添加：</p>



<pre class="wp-block-code"><code>......
account required pam_faillock.so
......</code></pre>



<p>（补充：这里以包括 root 用户每使用密码 ssh 远程登录失败 6 次则被锁定 180 秒为例）</p>



<h4 id="步骤三-远程登录密码输错次数的用户管理-3-1-显示某个用户近期输错了几次密码">步骤三：远程登录密码输错次数的用户管理<br>3.1 显示某个用户近期输错了几次密码</h4>



<pre class="wp-block-code"><code># faillock --user root</code></pre>



<p>（补充：这里以显示 root 用户近期输错了几次密码为例）</p>



<h4 id="3-2-重制所有登录密码输错次数">3.2 重制所有登录密码输错次数</h4>



<pre class="wp-block-code"><code># faillock --reset</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 本地和 ssh 输错密码次数的限制 （pam_faillock 版） （authselect 版） （CentOS Linux 8 &#038; RHEL 8 版）</title>
		<link>https://eternalcenter-2022-03.github.io/ssh-attempt-pam_faillock-authselect-centos-linux-8-rhel-8/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 01 Jan 2022 14:04:37 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=20768</guid>

					<description><![CDATA[步骤目录： 步骤一：背景了解 步骤二：设置 ssh 的登录限制2.1 在 sshd 中开启 UsePAM2.1.1 修改 sshd 配置文件2.1.2 让 sshd 的配置生效2.2 确保 /etc/pam.d/sshd 包含 password-auth 步骤三：检查是否选择了 authselect 自定义认证 步骤四：配置认证4.1 如果 authselect 自定义认证存在4.1.1 修改 system-auth 文件4.1.2 修改 password-auth 文件4.2 如果 authselect 自定义认证不存在4.2.1 修改 system-auth 文件4.2.2 修改 password-auth 文件 步骤五：让配置的认证生效 步骤六：远程登录密码输错次数的用户管理6.1 显示某个用户近期输错了几次密码6.2 重制所有远程登录密码输错次数 补充：生成 authselect 自定义认证的方法 具体的操作步骤： 步骤一：背景了解 从 CentOS Linux 8 &#38; &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/ssh-attempt-pam_faillock-authselect-centos-linux-8-rhel-8/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Linux 本地和 ssh 输错密码次数的限制 （pam_faillock 版） （authselect 版） （CentOS Linux 8 &#038; RHEL 8 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2 id="步骤目录">步骤目录：</h2>



<h4 id="步骤一-背景了解">步骤一：背景了解</h4>



<h4 id="步骤二-设置-ssh-的登录限制-2-1-在-sshd-中开启-usepam-2-1-1-修改-sshd-配置文件-2-1-2-让-sshd-的配置生效-2-2-确保-etc-pam-d-sshd-包含-password-auth">步骤二：设置 ssh 的登录限制<br>2.1 在 sshd 中开启 UsePAM<br>2.1.1 修改 sshd 配置文件<br>2.1.2 让 sshd 的配置生效<br>2.2 确保 /etc/pam.d/sshd 包含 password-auth</h4>



<h4 id="步骤三-检查是否选择了-authselect-自定义认证">步骤三：检查是否选择了  authselect  自定义认证</h4>



<h4 id="步骤四-配置认证-4-1-如果-authselect-自定义认证存在-4-1-1-修改-system-auth-文件-4-1-2-修改-password-auth-文件-4-2-如果-authselect-自定义认证不存在-4-2-1-修改-system-auth-文件-4-2-2-修改-password-auth-文件">步骤四：配置认证<br>4.1 如果  authselect  自定义认证存在<br>4.1.1 修改 system-auth 文件<br>4.1.2 修改 password-auth 文件<br>4.2 如果  authselect  自定义认证不存在<br>4.2.1 修改 system-auth 文件<br>4.2.2 修改 password-auth 文件</h4>



<h4 id="步骤五-让配置的认证生效">步骤五：让配置的认证生效</h4>



<h4 id="步骤六-远程登录密码输错次数的用户管理-6-1-显示某个用户近期输错了几次密码-6-2-重制所有远程登录密码输错次数">步骤六：远程登录密码输错次数的用户管理<br>6.1 显示某个用户近期输错了几次密码<br>6.2 重制所有远程登录密码输错次数</h4>



<h4 id="补充-生成-authselect-自定义认证的方法">补充：生成  authselect  自定义认证的方法</h4>



<h2 id="具体的操作步骤">具体的操作步骤：</h2>



<h4 id="步骤一-背景了解">步骤一：背景了解</h4>



<p>从 CentOS Linux 8 &amp; RHEL 8 开始，系统的身份验证模块从 CentOS Linux 7 &amp; RHEL 7 的 pam_tally2 换成了 pam_faillock</p>



<h4 id="步骤二-设置-ssh-的登录限制-2-1-在-sshd-中开启-usepam-2-1-1-修改-sshd-配置文件">步骤二：设置 ssh 的登录限制<br>2.1 在 sshd 中开启 UsePAM<br>2.1.1 修改 sshd 配置文件</h4>



<pre class="wp-block-code"><code># vim /etc/ssh/sshd_config</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
#UsePAM no
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
UsePAM yes
......</code></pre>



<h4 id="2-1-2-让-sshd-的配置生效">2.1.2 让 sshd 的配置生效</h4>



<pre class="wp-block-code"><code># systemctl restart sshd</code></pre>



<h4 id="2-2-确保-etc-pam-d-sshd-包含-password-auth">2.2 确保 /etc/pam.d/sshd 包含 password-auth</h4>



<pre class="wp-block-code"><code># cat /etc/pam.d/sshd | grep password-auth
auth       substack     password-auth
account    include      password-auth
password   include      password-auth
session    include      password-auth</code></pre>



<p>（注意：如果输出结果中不包含这 4 条内容则需要手动添加）</p>



<h4 id="步骤三-检查是否选择了-authselect-自定义认证">步骤三：检查是否选择了  authselect  自定义认证</h4>



<pre class="wp-block-code"><code># authselect current | awk 'NR == 1 {print $3}' | grep custom/
custom/password-policy</code></pre>



<p>（<br>补充：<br>（1）如果这条命令里没有输出则代表没有选择自定义认证<br>（2）从这里的输出结果可以看出这里选择的自定义认证是 custom/password-policy<br>）</p>



<h4 id="步骤四-配置认证-4-1-如果-authselect-自定义认证存在-4-1-1-修改-system-auth-文件">步骤四：配置认证<br>4.1 如果  authselect  自定义认证存在<br>4.1.1 修改 system-auth 文件</h4>



<pre class="wp-block-code"><code># vim /etc/authselect/custom/password-policy/system-auth</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail                               {include if "with-faillock"}
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......</code></pre>



<p>（补充：这里以包括 root 用户每使用密码 ssh 远程登录失败 6 次则被锁定 180 秒为例）</p>



<h4 id="4-1-2-修改-password-auth-文件"> 4.1.2 修改 password-auth 文件 </h4>



<pre class="wp-block-code"><code># vim /etc/authselect/custom/password-policy/password-auth</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail                               {include if "with-faillock"}
......

修改为：
......
auth        required                                     pam_faillock.so preauth silent audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......</code></pre>



<p>（补充：这里以包括 root 用户每使用密码 ssh 远程登录失败 6 次则被锁定 180 秒为例）</p>



<h4 id="4-2-如果-authselect-自定义认证不存在-4-2-1-修改-system-auth-文件">4.2 如果  authselect  自定义认证不存在<br>4.2.1 修改 system-auth 文件</h4>



<pre class="wp-block-code"><code># vim /etc/authselect/system-auth</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail                               {include if "with-faillock"}
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......</code></pre>



<p>（补充：这里以包括 root 用户每使用密码 ssh 远程登录失败 6 次则被锁定 180 秒为例）</p>



<h4 id="4-2-2-修改-password-auth-文件">4.2.2 修改 password-auth 文件</h4>



<pre class="wp-block-code"><code># vim /etc/authselect/password-auth</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail                               {include if "with-faillock"}
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
auth        required                                     pam_faillock.so preauth silent audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......
auth        required                                     pam_faillock.so authfail audit even_deny_root deny=6 unlock_time=180                               {include if "with-faillock"}
......</code></pre>



<p>（补充：这里以包括 root 用户每使用密码 ssh 远程登录失败 6 次则被锁定 180 秒为例）</p>



<h4 id="步骤五-让配置的认证生效">步骤五：让配置的认证生效</h4>



<pre class="wp-block-code"><code># authselect apply-changes</code></pre>



<h4 id="步骤六-远程登录密码输错次数的用户管理-6-1-显示某个用户近期输错了几次密码">步骤六：远程登录密码输错次数的用户管理<br>6.1 显示某个用户近期输错了几次密码</h4>



<pre class="wp-block-code"><code># faillock --user root</code></pre>



<p>（补充：这里以显示 root 用户近期输错了几次密码为例）</p>



<h4 id="6-2-重制所有远程登录密码输错次数">6.2 重制所有远程登录密码输错次数</h4>



<pre class="wp-block-code"><code># faillock --reset</code></pre>



<h4 id="补充-生成-authselect-自定义认证的方法">补充：生成  authselect  自定义认证的方法</h4>



<pre class="wp-block-code"><code># authselect apply-changes -b --backup=sssd.backup
# authselect create-profile password-policy -b sssd --symlink-meta --symlink-pam
# authselect select custom/password-policy with-sudo with-faillock without-nullok with-mkhomedir
# authselect current</code></pre>



<p>（补充：这里以生成并选择名为 password-policy 的自定义认证为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 ssh （远程登录）</title>
		<link>https://eternalcenter-2022-03.github.io/ssh/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 26 Nov 2021 15:56:06 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=19146</guid>

					<description><![CDATA[案例一：脚本中常用的方式 （补充：这里以1) 安静模式2) 打开新端口的模式3) 不检查服务器记录4) 超时时间为 5 秒5) 通过 eternalcenter 用户6) 登录 eternalcenter.com 服务器为例） 案例二：在操作中常用的方式 （补充：这里以1) 带图形的模式2) 通过 eternalcenter 用户3) 登录 eternalcenter.com 服务器为例）]]></description>
										<content:encoded><![CDATA[
<h2>案例一：脚本中常用的方式</h2>



<pre class="wp-block-code"><code># ssh -q -t -t -o StrictHostKeyChecking=no -o ConnectTimeout=5 -l eternalcenter eternalcenter.com</code></pre>



<p>（<br>补充：这里以<br>1) 安静模式<br>2) 打开新端口的模式<br>3) 不检查服务器记录<br>4) 超时时间为 5 秒<br>5) 通过 eternalcenter 用户<br>6) 登录 eternalcenter.com 服务器<br>为例<br>）</p>



<h2>案例二：在操作中常用的方式</h2>



<pre class="wp-block-code"><code># ssh -X eternalcenter@eternalcenter.com</code></pre>



<p>（<br>补充：这里以<br>1) 带图形的模式<br>2) 通过 eternalcenter 用户<br>3) 登录 eternalcenter.com 服务器<br>为例<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 批量修改多个远程服务器某一个用户的密码 （精致版）</title>
		<link>https://eternalcenter-2022-03.github.io/shell-password-change-refined-version/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 10 Oct 2021 13:08:50 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=18100</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：批量修改多个远程服务器某一个用户的密码作用：批量修改多个远程服务器某一个用户的密码 使用方法：1. 将此脚本和清单 $list 文件放在同一目录下2. 清单 $list 里每服务器名占用一行3. 给脚本分割线里的变量赋值4. 给此脚本添加执行权限5. 执行此脚本 脚本分割线里的变量：1. list=”list.txt” #指定清单的目录和名称2. user=eternalcenter #指定要修改密码的用户3. password=eternalcenter #指定要修改的密码 注意：此脚本执行前必须要先保证执行本脚本的用户能无密码 ssh 远程这些远程服务器，并且可以通过 sudo 获得 su 的 root 权限 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：批量修改多个远程服务器某一个用户的密码<br>作用：批量修改多个远程服务器某一个用户的密码</p>



<p>使用方法：<br>1. 将此脚本和清单 $list 文件放在同一目录下<br>2. 清单 $list 里每服务器名占用一行<br>3. 给脚本分割线里的变量赋值<br>4. 给此脚本添加执行权限<br>5. 执行此脚本</p>



<p>脚本分割线里的变量：<br>1. list=”list.txt” #指定清单的目录和名称<br>2. user=eternalcenter #指定要修改密码的用户<br>3. password=eternalcenter #指定要修改的密码</p>



<p>注意：<br>此脚本执行前必须要先保证执行本脚本的用户能无密码 ssh 远程这些远程服务器，并且可以通过 sudo 获得 su 的 root 权限</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################

list="list.txt"
user=eternalcenter
password=eternalcenter

####################### Separator ########################

num=1

cat $list
for i in `cat $list`
do
        echo $num
        echo $i

	ssh -t $i "type lsb_release" &amp;> /dev/null
        if &#91; $? -ne 0 ]; then
              distribution=`ssh -t $i "cat /etc/*release | grep '^NAME'"`
	      if &#91; $? -ne 0 ];then
		      distribution=`ssh -t $i "cat /etc/*release"`
	      fi
        else
              distribution=`ssh -t $i "lsb_release -i | grep 'ID' | grep -v 'n/a'"`
        fi;

        echo $distribution

	case $distribution in
		*"RedHat"* | *"Red Hat"*)
		ssh -t $i "sudo -u root su - root -c \"echo $password | passwd --stdin $user\""
		if &#91; $? -eq 0 ];then
			echo -e "\033&#91;32m$i is success\033&#91;0m"
		else
			echo -e "\033&#91;31m$i is fail\033&#91;0m"
		fi
		;;

		*"CentOS"*)
		ssh -t $i "sudo -u root su - root -c \"echo $password | passwd --stdin $user\""
		if &#91; $? -eq 0 ];then
			echo -e "\033&#91;32m$i is success\033&#91;0m"
		else
			echo -e "\033&#91;31m$i is fail\033&#91;0m"
		fi
		;;

		*"SUSE"* | *"SLES"*)
		ssh -t $i "sudo -u root su - root -c \"echo $user:$password | chpasswd\""
		if &#91; $? -eq 0 ];then
			echo -e "\033&#91;32m$i is success\033&#91;0m"
		else
			echo -e "\033&#91;31m$i is fail\033&#91;0m"
		fi
		;;
               
		*"openSUSE"*)
		ssh -t $i "sudo -u root su - root -c \"echo $user:$password | chpasswd\""
		if &#91; $? -eq 0 ];then
			echo -e "\033&#91;32m$i is success\033&#91;0m"
		else
			echo -e "\033&#91;31m$i is fail\033&#91;0m"
		fi
		;;

		*)
                echo -e "\033&#91;31m$i is fail \033&#91;0m" 
		;;
        esac

        let num++

        echo
done</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 批量修改多个远程服务器某一个用户的密码 （简单版）</title>
		<link>https://eternalcenter-2022-03.github.io/shell-password-change-simple-version/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 09 Jun 2021 10:37:59 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=14638</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：批量修改多个远程服务器某一个用户的密码作用：批量修改多个远程服务器某一个用户的密码，并显示密码更新时间 使用方法：1. 将此脚本和清单 $list 文件放在同一目录下2. 清单 $list 里每服务器名占用一行3. 给脚本分割线里的变量赋值4. 给此脚本添加执行权限5. 执行此脚本 脚本分割线里的变量：1. list=&#8221;list.txt&#8221; #指定清单的目录和名称2. user=eternalcenter #指定要修改密码的用户3. password=eternalcenter #指定要修改的密码 注意：此脚本执行前必须要先保证执行本脚本的用户能无密码 ssh 远程这些远程服务器，并且可以通过 sudo 获得 su 的 root 权限 脚本：]]></description>
										<content:encoded><![CDATA[
<h2 id="介绍">介绍：</h2>



<p>作者：朱明宇<br>名称：批量修改多个远程服务器某一个用户的密码<br>作用：批量修改多个远程服务器某一个用户的密码，并显示密码更新时间</p>



<p>使用方法：<br>1. 将此脚本和清单 $list 文件放在同一目录下<br>2. 清单 $list 里每服务器名占用一行<br>3. 给脚本分割线里的变量赋值<br>4. 给此脚本添加执行权限<br>5. 执行此脚本</p>



<p>脚本分割线里的变量：<br>1. list=&#8221;list.txt&#8221; #指定清单的目录和名称<br>2. user=eternalcenter #指定要修改密码的用户<br>3. password=eternalcenter #指定要修改的密码</p>



<p>注意：<br>此脚本执行前必须要先保证执行本脚本的用户能无密码 ssh 远程这些远程服务器，并且可以通过 sudo 获得 su 的 root 权限</p>



<h2 id="脚本">脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################

list="list.txt"
user=eternalcenter
password=eternalcenter

####################### Separator ########################

num=1

cat $list
for i in `cat $list`
do
        echo $num
        echo $i
        ssh -t $i "sudo -u root su - root -c \"echo $password | passwd --stdin $user\""
        ssh -t $i "sudo -u root su - root -c \"echo $user:$password | chpasswd\""
        ssh -t $i sudo -u root su - root -c \"chage -l $user\"
        let num++

        echo
done</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux ssh 登陆提示信息的修改</title>
		<link>https://eternalcenter-2022-03.github.io/banner-ssh/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 11 May 2021 09:17:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=14227</guid>

					<description><![CDATA[步骤一：修改 sshd 的配置 将以下内容： 修改为： 或者： （补充：这里以将 ssh 登陆提示信息修改为 eternalcenter 为例） 步骤二：重启 sshd 服务]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：修改 sshd 的配置</h4>



<pre class="wp-block-code"><code># vim /etc/ssh/sshd_config</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>#Banner none</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>Banner eternalcenter</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/.*Banner.*/Banner eternalcenter/' /etc/ssh/sshd_config</code></pre>



<p>（补充：这里以将 ssh 登陆提示信息修改为 eternalcenter 为例）</p>



<h4>步骤二：重启 sshd 服务</h4>



<pre class="wp-block-code"><code># systemctl restart sshd</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 本地登陆提示信息的修改 （openSUSE &#038; SLE 版）</title>
		<link>https://eternalcenter-2022-03.github.io/banner-local-opensuse-sle/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 11 May 2021 03:26:28 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=14223</guid>

					<description><![CDATA[内容目录： 内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SLE12.X 修改本地登陆提示信息 内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息2.1 修改本地登陆系统方面的提示信息2.2 去除本地登陆网卡方面的提示信息2.2.1 去除现有的网卡提示信息2.2.2 设置不再新生成网卡提示信息2.2.3 追加本地登陆提示信息 内容三：SLE 15.X 修改本地登陆提示信息3.1 修改本地登陆系统方面的提示信息3.2 去除本地登陆网卡方面的提示信息3.2.1 去除现有的网卡提示信息3.2.2 设置不再新生成网卡提示信息3.2.3 设置不再新生成网卡提示信息 具体的内容： 内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SLE 12.X 修改本地登陆提示信息 （补充：这里以将本地登陆提示信息修改为 eternalcenter.com 为例） 内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息2.1 修改本地登陆系统方面的提示信息 2.2 去除本地登陆网卡方面的提示信息2.2.1 去除现有的网卡提示信息 2.2.2 设置不再新生成网卡提示信息 将以下内容： 修改为： 或者： （补充：1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例2) 将 NETWORK_INTERFACE_REGEX=&#8221;^[be]&#8221; 修改为 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/banner-local-opensuse-sle/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 本地登陆提示信息的修改 （openSUSE &#038; SLE 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SLE12.X 修改本地登陆提示信息</h4>



<h4>内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息<br>2.1 修改本地登陆系统方面的提示信息<br>2.2 去除本地登陆网卡方面的提示信息<br>2.2.1 去除现有的网卡提示信息<br>2.2.2 设置不再新生成网卡提示信息<br>2.2.3 追加本地登陆提示信息</h4>



<h4>内容三：SLE 15.X 修改本地登陆提示信息<br>3.1 修改本地登陆系统方面的提示信息<br>3.2 去除本地登陆网卡方面的提示信息<br>3.2.1 去除现有的网卡提示信息<br>3.2.2 设置不再新生成网卡提示信息<br>3.2.3 设置不再新生成网卡提示信息</h4>



<h2>具体的内容：</h2>



<h4>内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SLE 12.X 修改本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter.com' &gt; /etc/issue
# echo 'eternalcenter.com' &gt; /etc/issue.net</code></pre>



<p>（补充：这里以将本地登陆提示信息修改为 eternalcenter.com 为例）</p>



<h4>内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息<br>2.1 修改本地登陆系统方面的提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter' &gt; /usr/lib/issue.d/10-openSUSE.conf</code></pre>



<h4>2.2 去除本地登陆网卡方面的提示信息<br>2.2.1 去除现有的网卡提示信息</h4>



<pre class="wp-block-code"><code># issue-generator network remove eth0</code></pre>



<h4>2.2.2 设置不再新生成网卡提示信息</h4>



<pre class="wp-block-code"><code># vim /etc/sysconfig/issue-generator</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;be]"
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;b]"
......</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/NETWORK_INTERFACE_REGEX="^\&#91;be\]"/NETWORK_INTERFACE_REGEX="^\&#91;b\]"/' /etc/sysconfig/issue-generator</code></pre>



<p>（<br>补充：<br>1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例<br>2) 将 NETWORK_INTERFACE_REGEX=&#8221;^[be]&#8221; 修改为 NETWORK_INTERFACE_REGEX=&#8221;^[b]&#8221; 是不再显示网卡信息<br>）</p>



<h4>2.2.3 追加本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'Welcome' /etc/issue.d/issue</code></pre>



<p>（<br>补充：<br>1) 这里以添加 Welcome 本地登陆提示信息为例<br>2) 结合上文的案例，这里将同时显示 eternalcenter.com 和 Welcome<br>）</p>



<h4>内容三：SLE 15.X 修改本地登陆提示信息<br>3.1 修改本地登陆系统方面的提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter' &gt; /usr/lib/issue.d/10-SUSE</code></pre>



<h4>3.2 去除本地登陆网卡方面的提示信息<br>3.2.1 去除现有的网卡提示信息</h4>



<pre class="wp-block-code"><code># issue-generator network remove eth0</code></pre>



<h4>3.2.2 设置不再新生成网卡提示信息</h4>



<pre class="wp-block-code"><code># vim /etc/sysconfig/issue-generator</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;be]"
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;b]"
......</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/NETWORK_INTERFACE_REGEX="^\&#91;be\]"/NETWORK_INTERFACE_REGEX="^\&#91;b\]"/' /etc/sysconfig/issue-generator</code></pre>



<p>（<br>补充：<br>1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例<br>2) 将 NETWORK_INTERFACE_REGEX=”^[be]” 修改为 NETWORK_INTERFACE_REGEX=”^[b]” 是不再显示网卡信息<br>）</p>



<h4>3.2.3 追加本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'Welcome' /etc/issue.d/issue</code></pre>



<p>（<br>补充：<br>1) 这里以添加 Welcome 本地登陆提示信息为例<br>2) 结合上文的案例，这里将同时显示 eternalcenter.com 和 Welcome<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 本地输错密码次数的限制 （pam_tally2.so 版） （openSUSE &#038; SLE &#038; CentOS Linux 7 &#038; RHEL 7 版）</title>
		<link>https://eternalcenter-2022-03.github.io/local-login-attempt-pam_tally2-so-opensuse-sle-centos-linux-7-rhel-7/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 20 Mar 2021 12:00:54 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13629</guid>

					<description><![CDATA[步骤一：在 /etc/pam.d/login 文件中配置 pam_tally2.so 模块的相关参数 （补充：1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块2) 这里的 deny=15 代表输错 15 次后会禁止登陆3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆4) 这里的 even_deny_root 代表 root 用户也包括在其中5）这里的 root_unlock_time=3000 代表禁止 root 用户登陆后 3000 毫秒后可以重新登陆） 步骤二：在 /etc/pam.d/sshd 文件中添加使用 pam_tally2.so 模块的参数 （补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块） 步骤三：远程登录密码输错次数的用户管理3.1 显示某一个用户近期输错了几次密码 3.2 重制某一个用户登录密码输错次数]]></description>
										<content:encoded><![CDATA[
<h4 id="步骤一-在-etc-pam-d-login-文件中配置-pam-tally2-so-模块的相关参数">步骤一：在 /etc/pam.d/login 文件中配置 pam_tally2.so 模块的相关参数</h4>



<pre class="wp-block-code"><code># sed -i '/auth.*include.*common-auth/a auth      required   pam_tally2.so onerr=fail audit silent deny=15 unlock_time=3000 even_deny_root root_unlock_time=3000' /etc/pam.d/login</code></pre>



<p>（<br>补充：<br>1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块<br>2) 这里的 deny=15 代表输错 15 次后会禁止登陆<br>3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆<br>4) 这里的 even_deny_root 代表 root 用户也包括在其中<br>5）这里的 root_unlock_time=3000 代表禁止 root 用户登陆后 3000 毫秒后可以重新登陆<br>）</p>



<h4 id="步骤二-在-etc-pam-d-sshd-文件中添加使用-pam-tally2-so-模块的参数">步骤二：在 /etc/pam.d/sshd 文件中添加使用 pam_tally2.so 模块的参数</h4>



<pre class="wp-block-code"><code># sed -i '/account.*include.*common-account/a account     required    pam_tally2.so' /etc/pam.d/login</code></pre>



<p>（补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块）</p>



<h4 id="步骤三-远程登录密码输错次数的用户管理-3-1-查看某一个用户近期输错了几次密码">步骤三：远程登录密码输错次数的用户管理<br>3.1 显示某一个用户近期输错了几次密码</h4>



<pre class="wp-block-code"><code># pam_tally2 -u &lt;user&gt;</code></pre>



<h4 id="3-2-重制某一个用户登录密码输错次数">3.2 重制某一个用户登录密码输错次数</h4>



<pre class="wp-block-code"><code># pam_tally2 -u &lt;user&gt; -r --reset</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux ssh 输错密码次数的限制 （pam_tally2.so 版） （openSUSE &#038; SLE &#038; CentOS Linux 7 &#038; RHEL 7 版）</title>
		<link>https://eternalcenter-2022-03.github.io/ssh-attempt-pam_tally2-so-opensuse-sle-centos-linux-7-rhel-7/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 20 Mar 2021 11:54:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13618</guid>

					<description><![CDATA[步骤一：在 /etc/pam.d/sshd 文件中配置 pam_tally2.so 模块的相关参数 （补充：1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块2) 这里的 deny=15 代表输错 15 次后会禁止登陆3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆4) 这里的 even_deny_root 代表 root 用户也包括在其中5）这里的 root_unlock_time=3000 代表禁止 root 用户登陆后 3000 毫秒后可以重新登陆） 步骤二：在 /etc/pam.d/sshd 文件中添加使用 pam_tally2.so 模块的参数 （补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块） 步骤三：远程登录密码输错次数的用户管理3.1 查看某一个用户近期输错了几次密码 3.2 重制某一个用户登录密码输错次数]]></description>
										<content:encoded><![CDATA[
<h4 id="步骤一-在-etc-pam-d-sshd-文件中配置-pam-tally2-so-模块的相关参数">步骤一：在 /etc/pam.d/sshd 文件中配置 pam_tally2.so 模块的相关参数</h4>



<pre class="wp-block-code"><code># sed -i '/auth.*include.*common-auth/a auth        required    pam_tally2.so onerr=fail audit silent deny=15 unlock_time=3000 even_deny_root root_unlock_time=3000' /etc/pam.d/sshd</code></pre>



<p>（<br>补充：<br>1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块<br>2) 这里的 deny=15 代表输错 15 次后会禁止登陆<br>3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆<br>4) 这里的 even_deny_root 代表 root 用户也包括在其中<br>5）这里的 root_unlock_time=3000 代表禁止 root 用户登陆后 3000 毫秒后可以重新登陆<br>）</p>



<h4 id="步骤二-在-etc-pam-d-sshd-文件中添加使用-pam-tally2-so-模块的参数">步骤二：在 /etc/pam.d/sshd 文件中添加使用 pam_tally2.so 模块的参数</h4>



<pre class="wp-block-code"><code># sed -i '/account.*include.*common-account/a account     required    pam_tally2.so' /etc/pam.d/sshd</code></pre>



<p>（补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块）</p>



<h4 id="步骤三-远程登录密码输错次数的用户管理-3-1-查看某一个用户近期输错了几次密码">步骤三：远程登录密码输错次数的用户管理<br>3.1 查看某一个用户近期输错了几次密码</h4>



<pre class="wp-block-code"><code># pam_tally2 -u &lt;user&gt;</code></pre>



<h4 id="3-2-重制某一个用户登录密码输错次数">3.2 重制某一个用户登录密码输错次数</h4>



<pre class="wp-block-code"><code># pam_tally2 -u &lt;user> -r --reset</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux su 命令白名单的设置</title>
		<link>https://eternalcenter-2022-03.github.io/su-white-list/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 05 Mar 2021 08:24:01 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13611</guid>

					<description><![CDATA[步骤一：设置只能属于某一个组的用户才能使用 su 命令1.1 CentOS&#38;RHEL 设置只能属于某一个组的用户才能使用 su 命令 （补充：这里以设置只能 wheel 才能使用 su 命令为例） 1.2 openSUSE&#38;SUSE 设置只能属于某一个组的用户才能使用 su 命令 （补充：这里以设置只能 wheel 才能使用 su 命令为例） 步骤二：将需要使用 su 命令的用户添加到可以使用 su 命令的组 （补充：这里以给 eternalcenter 用户添加 wheel 附属所属组为例） 步骤三：验证 su 命令白名单3.1 以其他普通用户的身份使用 su 命令切换到其他用户 （步骤略） （补充：就算密码正确也会显示 su: Authentication failure） 3.2 以在白名单用户的身份使用 su 命令切换到其他用户]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：设置只能属于某一个组的用户才能使用 su 命令<br>1.1 CentOS&amp;RHEL 设置只能属于某一个组的用户才能使用 su 命令</h4>



<pre class="wp-block-code"><code># sed -i '/auth.*include.*common-auth/a     auth     required       pam_wheel.so use_uid' /etc/pam.d/su</code></pre>



<p>（补充：这里以设置只能 wheel 才能使用 su 命令为例）</p>



<h4>1.2 openSUSE&amp;SUSE 设置只能属于某一个组的用户才能使用 su 命令</h4>



<pre class="wp-block-code"><code># sed -i '/auth.*include.*common-auth/a     auth     required       pam_wheel.so use_uid' /etc/pam.d/su
# sed -i '/auth.*include.*common-auth/a     auth     required       pam_wheel.so use_uid' /etc/pam.d/su-l</code></pre>



<p>（补充：这里以设置只能 wheel 才能使用 su 命令为例）</p>



<h4>步骤二：将需要使用 su 命令的用户添加到可以使用 su 命令的组</h4>



<pre class="wp-block-code"><code># usermod -a -G wheel eternalcenter</code></pre>



<p>（补充：这里以给 eternalcenter 用户添加 wheel 附属所属组为例）</p>



<h4>步骤三：验证 su 命令白名单<br>3.1 以其他普通用户的身份使用 su 命令切换到其他用户</h4>



<p>（步骤略）</p>



<p>（补充：就算密码正确也会显示 su: Authentication failure）</p>



<h4>3.2 以在白名单用户的身份使用 su 命令切换到其他用户</h4>



<pre class="wp-block-code"><code># su - eternalcenter
$ su - root</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] GRUB2 Bootloader 密码的设置 （CentOS Linux &#038; RHEL 版）</title>
		<link>https://eternalcenter-2022-03.github.io/grub2-bootloader-centos-linux-rhel/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 05 Mar 2021 07:43:06 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13602</guid>

					<description><![CDATA[步骤一：生成密码的 GRUB2 密码的 SHA512 值 （补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例） （注意：grub.pbkdf2.sha512.10000……. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行） 步骤二：创建 GRUB2 密码文件2.1 给 EFI 的 CentOS &#38; RHEL 创建 GRUB2 密码文件 （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的） （注意：这里其实只有一行，因为是显示问题所以看上去是多行） 2.2 给 BIOS 的 CentOS &#38; RHEL 创建 GRUB2 密码文件 （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的） （注意：这里其实只有一行，因为是显示问题所以看上去是多行） 步骤三：测试 GRUB2 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/grub2-bootloader-centos-linux-rhel/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] GRUB2 Bootloader 密码的设置 （CentOS Linux &#038; RHEL 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：生成密码的 GRUB2 密码的 SHA512 值</h4>



<pre class="wp-block-code"><code># grub2-mkpasswd-pbkdf2
Enter password: 
Reenter password: 
PBKDF2 hash of your password is 
grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F</code></pre>



<p>（补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例）</p>



<p>（注意：grub.pbkdf2.sha512.10000……. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行）</p>



<h4>步骤二：创建 GRUB2 密码文件<br>2.1 给 EFI 的 CentOS &amp; RHEL 创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code>echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/efi/EFI/redhat/user.cfg</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的<br>）</p>



<p>（注意：这里其实只有一行，因为是显示问题所以看上去是多行）</p>



<h4>2.2 给 BIOS 的 CentOS &amp; RHEL 创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code>echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/grub2/user.cfg</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的<br>）</p>



<p>（注意：这里其实只有一行，因为是显示问题所以看上去是多行）</p>



<h4>步骤三：测试 GRUB2 Bootloader 密码<br>3.1 重启系统</h4>



<p>（步骤略）</p>



<h4>3.2 进入到 GRUB2 Bootloader 模式</h4>



<p>当启动系统时按下 “E”：</p>



<h4>补充：更改 GRUB2 的登陆用户<br>补充一：给 EFI 的 CentOS &amp; RHEL 更改 GRUB2 的登陆用户</h4>



<pre class="wp-block-code"><code># echo &lt;user&gt; &gt; /boot/efi/EFI/redhat/user.cfg</code></pre>



<h4>补充二：给 BIOS 的 CentOS &amp; RHEL 更改 GRUB2 的登陆用户</h4>



<pre class="wp-block-code"><code># echo &lt;user&gt; &gt; /boot/grub2/user.cfg</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 自动化部署 GRUB2 Bootloader 密码 （CentOS Linux &#038; RHEL 版）</title>
		<link>https://eternalcenter-2022-03.github.io/shell-grub2-bootloader-centos-linux-rhel/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 04 Mar 2021 08:53:25 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13593</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：自动化部署 GRUB2 Bootloader 密码（CentOS &#38; RHEL 版）作用：自动化部署 GRUB2 Bootloader 密码（CentOS &#38; RHEL 版） 使用方法：1. 给此脚本添加执行权限2. 执行此脚本3. 当启动系统时，左下角出现以下内容时按下 “E”： 注意：1. 登陆的账号是 root2. 登陆的密码是 eternalcenter 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：自动化部署 GRUB2 Bootloader 密码（CentOS &amp; RHEL 版）<br>作用：自动化部署 GRUB2 Bootloader 密码（CentOS &amp; RHEL 版）</p>



<p>使用方法：<br>1. 给此脚本添加执行权限<br>2. 执行此脚本<br>3. 当启动系统时，左下角出现以下内容时按下 “E”：</p>



<p>注意：<br>1. 登陆的账号是 root<br>2. 登陆的密码是 eternalcenter</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

if &#91; -d /sys/firmware/efi ]; then
        echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/efi/EFI/redhat/user.cfg
else
        echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/grub2/user.cfg
fi</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 自动化部署 GRUB2 Bootloader 密码 （openSUSE &#038; SLE 版）</title>
		<link>https://eternalcenter-2022-03.github.io/shell-grub2-bootloader-opensuse-sle/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 22 Feb 2021 09:31:39 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13578</guid>

					<description><![CDATA[介绍： 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<pre id="block-1cba4442-ff4e-41c6-afad-060afadd2d25" class="wp-block-code"><code>作者：朱明宇
名称：自动化部署 GRUB2 Bootloader 密码（openSUSE &amp; SLE 版）
作用：自动化部署 GRUB2 Bootloader 密码（openSUSE &amp; SLE 版）

使用方法：
1. 给此脚本添加执行权限
2. 执行此脚本
3. 当启动系统时，左下角出现以下内容时按下 “E”：
C: Command Line    E: Edit Entry

注意：
1. 登陆的账号是 root
2. 登陆的密码是 eternalcenter</code></pre>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

echo "#!/bin/sh
exec tail -n +3 \$0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
set superusers=\"root\"
password_pbkdf2 root grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F
export superusers
set unrestricted_menu=\"y\"
export unrestricted_menu" &gt; /etc/grub.d/40_custom

grep "rd.shell=0" /etc/default/grub
if &#91; $? -ne 0 ];then
        sed -i '/GRUB_CMDLINE_LINUX_DEFAULT="/s/"$/ rd.shell=0"/' /etc/default/grub
fi

grep "showopts" /etc/default/grub
if &#91; $? -ne 0 ];then
        sed -i '/GRUB_CMDLINE_LINUX_DEFAULT="/s/"$/ showopts"/' /etc/default/grub
fi

grep "LANG=C" /etc/default/grub
if &#91; $? -ne 0 ];then
        sed -i '/GRUB_CMDLINE_LINUX_DEFAULT="/s/"$/ LANG=C"/' /etc/default/grub
fi

grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[实验] Linux ssh 内网穿透</title>
		<link>https://eternalcenter-2022-03.github.io/ssh-intranet-penetration/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 04 Feb 2021 07:25:46 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13271</guid>

					<description><![CDATA[步骤目录： 步骤一：规划拓扑1.1 服务器列表1.2 拓扑图1.3 服务器列表简介 步骤二：系统环境要求 步骤三：创建用于 ssh 内网穿透的用户3.1 创建用于 ssh 内网穿透的用户3.2 给用于 ssh 内网穿透的用户设置密码 步骤四：创建用于内 ssh 内网穿透的 ssh 密钥4.1 进入到用户4.2 创建用于内 ssh 内网穿透的 ssh 密钥4.3 退出用户 步骤五：让内网服务器可以无密码访问外网服务器5.1 进入到用户5.2 将内网服务器的公钥拷贝到外网服务器5.3 退出用户 步骤六：让外网服务器可以无密码访问自己6.1 进入到用户6.2 将内网服务器的公钥拷贝到外网服务器6.3 退出用户 步骤七：实现内网服务器到外网服务器的 ssh 内网穿透7.1 实现内网服务器到外网服务器的 ssh 通道7.2 实现外网服务器 ssh 端口的影射 步骤八：客户端电脑使用 ssh 外网穿透 具体的操作步骤： 步骤一：规划拓扑1.1 服务器列表 客户端电脑外网服务器内网服务器 1.2 拓扑图 客户端电脑 外网服务器 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/ssh-intranet-penetration/" class="more-link">Continue reading<span class="screen-reader-text"> "[实验] Linux ssh 内网穿透"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>步骤目录：</h2>



<h4>步骤一：规划拓扑<br>1.1 服务器列表<br>1.2 拓扑图<br>1.3 服务器列表简介</h4>



<h4>步骤二：系统环境要求</h4>



<h4>步骤三：创建用于 ssh 内网穿透的用户<br>3.1 创建用于 ssh 内网穿透的用户<br>3.2 给用于 ssh 内网穿透的用户设置密码</h4>



<h4>步骤四：创建用于内 ssh 内网穿透的 ssh 密钥<br>4.1 进入到用户<br>4.2 创建用于内 ssh 内网穿透的 ssh 密钥<br>4.3 退出用户</h4>



<h4>步骤五：让内网服务器可以无密码访问外网服务器<br>5.1 进入到用户<br>5.2 将内网服务器的公钥拷贝到外网服务器<br>5.3 退出用户</h4>



<h4>步骤六：让外网服务器可以无密码访问自己<br>6.1 进入到用户<br>6.2 将内网服务器的公钥拷贝到外网服务器<br>6.3 退出用户</h4>



<h4>步骤七：实现内网服务器到外网服务器的 ssh 内网穿透<br>7.1 实现内网服务器到外网服务器的 ssh 通道<br>7.2 实现外网服务器 ssh 端口的影射</h4>



<h4>步骤八：客户端电脑使用 ssh 外网穿透</h4>



<h2>具体的操作步骤：</h2>



<h4>步骤一：规划拓扑<br>1.1 服务器列表</h4>



<p>客户端电脑<br>外网服务器<br>内网服务器</p>



<h4>1.2 拓扑图</h4>



<p>客户端电脑 外网服务器 内网服务器</p>



<h4>1.3 拓扑图简介</h4>



<p>内网服务器建立到外网服务器的 ssh 通道<br>客户端电脑通过 ssh 外网服务器连接到内网服务器<br>内网服务器就算没有公网 IP 地址也能被 ssh 上</p>



<h4>步骤二：系统环境要求</h4>



<p>1) 所有服务器的系统都需要是 Linux 版本<br>2) 所有服务器都要关闭防火墙<br>3) 内网服务器要能够 ping 通外网服务器<br>4) 客户端电脑要能够 ping 通外网服务器</p>



<h4>步骤三：创建用于 ssh 内网穿透的用户<br>3.1 创建用于 ssh 内网穿透的用户</h4>



<p>（分别在内网服务器和外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code># useradd &lt;user for intranet penetration&gt;</code></pre>



<h4>3.2 给用于 ssh 内网穿透的用户设置密码</h4>



<p>（分别在内网服务器和外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code># passwd &lt;user for intranet penetration&gt;</code></pre>



<h4>步骤四：创建用于内 ssh 内网穿透的 ssh 密钥<br>4.1 进入到用户</h4>



<p>（分别在内网服务器和外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code># su - &lt;user for intranet penetration&gt;</code></pre>



<h4>4.2 创建用于内 ssh 内网穿透的 ssh 密钥</h4>



<p>（分别在内网服务器和外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ ssh-keygen</code></pre>



<h4>4.3 退出用户</h4>



<p>（分别在内网服务器和外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ exit</code></pre>



<h4>步骤五：让内网服务器可以无密码访问外网服务器<br>5.1 进入到用户</h4>



<p>（只在内网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code># su - &lt;user for intranet penetration&gt;</code></pre>



<h4>5.2 将内网服务器的公钥拷贝到外网服务器</h4>



<p>（只在内网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ ssh-copy-id &lt;IP address of Internet server&gt;</code></pre>



<h4>5.3 退出用户</h4>



<p>（只在内网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ exit</code></pre>



<h4>步骤六：让外网服务器可以无密码访问自己<br>6.1 进入到用户</h4>



<p>（只在外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code># su - &lt;user for intranet penetration&gt;</code></pre>



<h4>6.2 将内网服务器的公钥拷贝到外网服务器</h4>



<p>（只在外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ ssh-copy-id &lt;127.0.0.1&gt;</code></pre>



<h4>6.3 退出用户</h4>



<p>（只在外网服务器上执行以下步骤）</p>



<pre class="wp-block-code"><code>$ exit</code></pre>



<h4>步骤七：实现内网服务器到外网服务器的 ssh 内网穿透<br>7.1 实现内网服务器到外网服务器的 ssh 通道</h4>



<pre class="wp-block-code"><code># su - &lt;user for intranet penetration&gt;
$ ssh -X -fCNR 11000:localhost:22 &lt;IP address of Internet server&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># ps -aux | grep -v grep | grep "11000:localhost:22 &lt;IP address of Internet server&gt;" &amp;&gt; /dev/null || su - &lt;user for intranet penetration&gt; -c 'ssh -X -fCNR 11000:localhost:22 &lt;IP address of Internet server&gt;'</code></pre>



<p>（补充：这里以使用用于内网穿透的用户将内网服务器的 22 端口影射到外网服务器的 11000 端口为例）</p>



<h4>7.2 实现外网服务器 ssh 端口的影射</h4>



<pre class="wp-block-code"><code># su - &lt;user for intranet penetration&gt;
$ ssh -X -fCNL *:10000:localhost:11000 localhost</code></pre>



<p>或者:</p>



<pre class="wp-block-code"><code># ps -aux | grep -v grep | grep "*:10000:localhost:11000 localhost" || su - &lt;user for intranet penetration&gt; -c 'ssh -X -fCNL *:10000:localhost:11000 localhost'</code></pre>



<p>（补充：这里以使用用于内网穿透的用户将外网服务器的 10000 端口影射到外网服务器的 11000 端口为例）</p>



<h4>步骤八：客户端电脑使用 ssh 外网穿透</h4>



<pre class="wp-block-code"><code># ssh -p 10000 &lt;user for intranet penetration&gt;@&lt;IP address of Internet server&gt;</code></pre>



<p>（补充：ssh 成功后，客户端电脑就可以直接 ssh 到内网服务器中了）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 sshpass （密码非交互式 ssh） （转载）</title>
		<link>https://eternalcenter-2022-03.github.io/sshpass/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 15 Jan 2021 06:55:05 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13214</guid>

					<description><![CDATA[注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code>sshpass的安装使用
 
1：sshpass下载与安装
     yum安装：

    yum install sshpass

     若yum安装不上，则用下面方法

        https:&#47;&#47;sourceforge.net/projects/sshpass/files/
          or
        https://pan.baidu.com/s/1pLNxeLd
         or
        wget http://sourceforge.net/projects/sshpass/files/latest/download -O sshpass.tar.gz



 
2：下载后，解压，安装

      

        tar -zxvf sshpass-1.06.tar.gz
        cd sshpass-1.06
        ./configure
        make
        make install


3：使用命令

         

    sshpass -p 123456 scp /home/file.txt root@10.0.0.37:/home/copy



      后面这个是 “Are you sure you want to continue connecting (yes/no)”使得这个自动接受，若不加，则成功不了
 
4：脚本

    复制代码

          #!/bin/bash
            password=123456
            user=root
            ip=10.0.0.37
            file=/home/file.txt
           sshpass -p $password scp file $user@$ip:/home/copy/


————————————————
版权声明：本文为CSDN博主「totoroKing」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_30553235/article/details/78711491</code></pre>



<p>注明：所有转载内容皆直接从被转载文章网页的标题和内容的文本中复制而来</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1012" height="209" src="https://eternalcenter-2022-03.github.io/wp-content/uploads/2021/01/版权申明证明-sshpass.png" alt="" class="wp-image-13216" srcset="https://eternalcenter-2022-03.github.io/wp-content/uploads/2021/01/版权申明证明-sshpass.png 1012w, https://eternalcenter-2022-03.github.io/wp-content/uploads/2021/01/版权申明证明-sshpass-300x62.png 300w, https://eternalcenter-2022-03.github.io/wp-content/uploads/2021/01/版权申明证明-sshpass-768x159.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /><figcaption><em>CC 4.0 BY-SA 版权协议网址：https://creativecommons.org/licenses/by-sa/4.0/deed.z</em></figcaption></figure></div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] GRUB2 Bootloader 密码的设置 （openSUSE &#038; SLE 版）</title>
		<link>https://eternalcenter-2022-03.github.io/grub2-bootloader-opensuse-sle/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 30 Dec 2020 02:54:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=13137</guid>

					<description><![CDATA[步骤一：生成密码的 GRUB2 密码的 SHA512 值 （补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例） （注意：grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行） 步骤二：创建 GRUB2 密码文件 创建以下内容： （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B&#8230;&#8230; 是由步骤一生成的） （注意：1) password_pbkdf2 root 和 grub.pbkdf2.sha512.10000&#8230;&#8230; 其实是一行，中间只有一个空格，应该写成 password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;，这里因为是显示问题所以看上去是两行2) password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，从 export superusers 开始才是独立的一行，这里因为是显示问题所以看上去是多行） 步骤三：修改 /etc/default/grub 参数 在这一行里： 添加： 步骤四：让刚刚创建的 GRUB2 密码文件生效 步骤五：测试 GRUB2 Bootloader 密码5.1 重启系统 5.2 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/grub2-bootloader-opensuse-sle/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] GRUB2 Bootloader 密码的设置 （openSUSE &#038; SLE 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：生成密码的 GRUB2 密码的 SHA512 值</h4>



<pre class="wp-block-code"><code># grub2-mkpasswd-pbkdf2
Enter password: 
Reenter password: 
PBKDF2 hash of your password is 
grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F</code></pre>



<p>（补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例）</p>



<p>（注意：grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行）</p>



<h4>步骤二：创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code># vim /etc/grub.d/40_custom</code></pre>



<p>创建以下内容：</p>



<pre class="wp-block-code"><code>#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
set superusers="root"
password_pbkdf2 root grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F
export superusers
set unrestricted_menu="y"
export unrestricted_menu</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B&#8230;&#8230; 是由步骤一生成的<br>）</p>



<p>（<br>注意：<br>1) password_pbkdf2 root 和 grub.pbkdf2.sha512.10000&#8230;&#8230; 其实是一行，中间只有一个空格，应该写成 password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;，这里因为是显示问题所以看上去是两行<br>2) password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，从 export superusers 开始才是独立的一行，这里因为是显示问题所以看上去是多行<br>）</p>



<h4>步骤三：修改 /etc/default/grub 参数</h4>



<pre class="wp-block-code"><code># vim /etc/default/grub</code></pre>



<p>在这一行里：</p>



<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX_DEFAULT="......"</code></pre>



<p>添加：</p>



<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX_DEFAULT="...... rd.shell=0 showopts LANG=C/g"</code></pre>



<h4>步骤四：让刚刚创建的 GRUB2 密码文件生效</h4>



<pre class="wp-block-code"><code># grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre>



<h4>步骤五：测试 GRUB2 Bootloader 密码<br>5.1 重启系统</h4>



<h4>5.2 进入到 GRUB2 Bootloader 模式</h4>



<p>当启动系统时，左下角出现以下内容时按下 “E”：</p>



<pre class="wp-block-code"><code>    C: Command Line    E: Edit Entry</code></pre>



<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>



<p>参考文献：</p>



<p class="has-text-align-center">https://www.suse.com/support/kb/doc/?id=000019331</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 用户登陆的超时时间的设置</title>
		<link>https://eternalcenter-2022-03.github.io/timeout/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 09 Nov 2020 15:17:45 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=11664</guid>

					<description><![CDATA[内容一：临时设置用户登陆的超时时间 或者： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时） 内容二：永久设置用户登陆的超时时间2.1 通过 /etc/profile 文件实现2.1.1 修改 /etc/profile 文件 添加以下内容： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级） 2.1.2 使刚刚的设置生效 2.2 通过 /etc/bashrc 文件实现2.2.1 修改 /etc/bashrc 文件 添加以下内容： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级） 2.2.2 使刚刚的设置生效 内容三：显示现在用户登陆的超时时间 补充： &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/timeout/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 用户登陆的超时时间的设置"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4 id="内容一-临时设置用户登陆的超时时间">内容一：临时设置用户登陆的超时时间</h4>



<pre class="wp-block-code"><code># TMOUT=900</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># export TMOUT=0</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>）</p>



<h4 id="内容二-永久设置用户登陆的超时时间2-1-通过-etc-profile-文件实现2-1-1-修改-etc-profile-文件">内容二：永久设置用户登陆的超时时间<br>2.1 通过 /etc/profile 文件实现<br>2.1.1 修改 /etc/profile 文件</h4>



<pre class="wp-block-code"><code># vim /etc/profile</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
TMOUT=900</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级<br>）</p>



<h4 id="2-1-2-使刚刚的设置生效">2.1.2 使刚刚的设置生效</h4>



<pre class="wp-block-code"><code># source /etc/profile</code></pre>



<h4 id="2-2-通过-etc-bashrc-文件实现2-2-1-修改-etc-bashrc-文件">2.2 通过 /etc/bashrc 文件实现<br>2.2.1 修改 /etc/bashrc 文件</h4>



<pre class="wp-block-code"><code># vim /etc/bashrc</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
TMOUT=900</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级<br>）</p>



<h4 id="2-2-2-使刚刚的设置生效">2.2.2 使刚刚的设置生效</h4>



<pre class="wp-block-code"><code># source /etc/bashrc</code></pre>



<h4 id="内容三-显示现在用户登陆的超时时间">内容三：显示现在用户登陆的超时时间</h4>



<pre class="wp-block-code"><code># echo $TMOUT</code></pre>



<h4 id="补充">补充：</h4>



<p>当通过以上设置造成用户登陆超时时，系统会输出以下内容：</p>



<pre class="wp-block-code"><code># timed out waiting for input: auto-logout</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] VNC 数据的加密 （通过 SSH 实现）</title>
		<link>https://eternalcenter-2022-03.github.io/vnc-ssh/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 21 Sep 2020 14:56:43 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Port Security (系统端口安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[VNC]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-03.github.io/?p=10572</guid>

					<description><![CDATA[内容目录： 内容一：直接通过 SSH 对 VNC 进行加密1.1 直接通过 SSH 对 VNC 进行加密的格式1.2 直接通过 SSH 对 VNC 进行加密的案例 内容二：通过非标准端口的 SSH 对 VNC 进行加密2.1 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的格式2.2 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的案例 具体的内容： 内容一：直接通过 SSH 对 VNC 进行加密1.1 直接通过 SSH 对 VNC 进行加密的格式 1.2 直接通过 SSH 对 VNC 进行加密的案例 （补充：这里以使用 eternalcenter.com 服务器上的 &#8230; <p class="link-more"><a href="https://eternalcenter-2022-03.github.io/vnc-ssh/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] VNC 数据的加密 （通过 SSH 实现）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：直接通过 SSH 对 VNC 进行加密<br>1.1 直接通过 SSH 对 VNC 进行加密的格式<br>1.2 直接通过 SSH 对 VNC 进行加密的案例</h4>



<h4>内容二：通过非标准端口的 SSH 对 VNC 进行加密<br>2.1 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的格式<br>2.2 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的案例</h4>



<h2>具体的内容：</h2>



<h4>内容一：直接通过 SSH 对 VNC 进行加密<br>1.1 直接通过 SSH 对 VNC 进行加密的格式</h4>



<pre class="wp-block-code"><code># vncviewer -via &lt;SSH user of VNC server>@&lt;IP address of VNC server> localhost :&lt;VNC service number></code></pre>



<h4>1.2 直接通过 SSH 对 VNC 进行加密的案例</h4>



<pre class="wp-block-code"><code># vncviewer -via zhumingyu@eternalcenter.com localhost :1</code></pre>



<p>（补充：这里以使用 eternalcenter.com 服务器上的 zhumingyu 用户访问编号为 1 的 VNC 服务为例）</p>



<h4>内容二：通过非标准端口的 SSH 对 VNC 进行加密<br>2.1 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的格式</h4>



<pre class="wp-block-code"><code># ssh -p &lt;SSH non standard port number> -L &lt;Port number of VNC service>:localhost:&lt;Port number of VNC service> -l  &lt;SSH user of VNC server> &lt;IP address of VNC server></code></pre>



<p>另开启一个命令行终端：</p>



<pre class="wp-block-code"><code># vncviewer localhost :&lt;VNC service number></code></pre>



<h4>2.2 通过 SSH 对 VNC 进行加密，同时使用 SSH 隧道的案例</h4>



<pre class="wp-block-code"><code># ssh -p 1000 -L 5901:localhost:5901 -l zhumingyu eternalcenter.com</code></pre>



<p>另开启一个命令行终端：</p>



<pre class="wp-block-code"><code># vncviewer localhost :1</code></pre>



<p>（补充：这里以使用 eternalcenter.com 服务器上的 zhumingyu 用户通过 1000 端口号 的 SSH 访问编号为 1 的 VNC 服务为例）</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
